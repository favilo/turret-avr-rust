/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServoPin_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl ServoPin_t {
    #[inline]
    pub fn nbr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_nbr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn isActive(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_isActive(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(nbr: u8, isActive: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let nbr: u8 = unsafe { ::core::mem::transmute(nbr) };
            nbr as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let isActive: u8 = unsafe { ::core::mem::transmute(isActive) };
            isActive as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Servo {
    pub servoIndex: u8,
    pub min: i8,
    pub max: i8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5Servo6attachEi"]
    pub fn Servo_attach(this: *mut Servo, pin: ::core::ffi::c_int) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Servo6attachEiii"]
    pub fn Servo_attach1(
        this: *mut Servo,
        pin: ::core::ffi::c_int,
        min: ::core::ffi::c_int,
        max: ::core::ffi::c_int,
    ) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Servo6detachEv"]
    pub fn Servo_detach(this: *mut Servo);
}
extern "C" {
    #[link_name = "\u{1}_ZN5Servo5writeEi"]
    pub fn Servo_write(this: *mut Servo, value: ::core::ffi::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5Servo17writeMicrosecondsEi"]
    pub fn Servo_writeMicroseconds(this: *mut Servo, value: ::core::ffi::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5Servo4readEv"]
    pub fn Servo_read(this: *mut Servo) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Servo16readMicrosecondsEv"]
    pub fn Servo_readMicroseconds(this: *mut Servo) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Servo8attachedEv"]
    pub fn Servo_attached(this: *mut Servo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ServoC1Ev"]
    pub fn Servo_Servo(this: *mut Servo);
}
impl Servo {
    #[inline]
    pub unsafe fn attach(&mut self, pin: ::core::ffi::c_int) -> u8 {
        Servo_attach(self, pin)
    }
    #[inline]
    pub unsafe fn attach1(
        &mut self,
        pin: ::core::ffi::c_int,
        min: ::core::ffi::c_int,
        max: ::core::ffi::c_int,
    ) -> u8 {
        Servo_attach1(self, pin, min, max)
    }
    #[inline]
    pub unsafe fn detach(&mut self) {
        Servo_detach(self)
    }
    #[inline]
    pub unsafe fn write(&mut self, value: ::core::ffi::c_int) {
        Servo_write(self, value)
    }
    #[inline]
    pub unsafe fn writeMicroseconds(&mut self, value: ::core::ffi::c_int) {
        Servo_writeMicroseconds(self, value)
    }
    #[inline]
    pub unsafe fn read(&mut self) -> ::core::ffi::c_int {
        Servo_read(self)
    }
    #[inline]
    pub unsafe fn readMicroseconds(&mut self) -> ::core::ffi::c_int {
        Servo_readMicroseconds(self)
    }
    #[inline]
    pub unsafe fn attached(&mut self) -> bool {
        Servo_attached(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        Servo_Servo(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
